from telebot import types
from decimal import Decimal
from bot.database import create_db_connection
from bot.utils.exchange import get_exchange_rate
from bot.handlers.crypto_val import get_current_price


def setup_balance_handlers(bot):
    @bot.message_handler(commands=['balance'])
    def show_user_balance(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        connection = None
        cursor = None
        try:
            connection = create_db_connection()
            if not connection:
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            cursor = connection.cursor(dictionary=True)
            cursor.execute("""
                SELECT nickname, balance, balance_ar 
                FROM users 
                WHERE telegram_id = %s
            """, (message.from_user.id,))

            user_data = cursor.fetchone()

            cursor.execute("SELECT balance FROM users WHERE id = 3")
            bought_before = 1000 - cursor.fetchone()['balance'] or 0  # –°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∫—É–ø–ª–µ–Ω–æ –¥–æ –ø—Ä–æ–¥–∞–∂–∏

            if user_data:
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
                balance_es = user_data['balance'] or Decimal('0')
                balance_ar = user_data['balance_ar'] or Decimal('0')

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã

                total_refund = 0
                remaining_amount = balance_es
                while remaining_amount > 0:
                    current_chunk = min(1, remaining_amount)
                    current_price = Decimal('1') + Decimal('0.1') * (bought_before - 1)  # –¶–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –µ–¥–∏–Ω–∏—Ü—ã
                    total_refund += current_price * current_chunk
                    bought_before -= current_chunk
                    remaining_amount -= current_chunk

                rate = get_current_price()
                conversion_text = ""
                if rate and rate > 0:
                    conversion_text = f"\n  ‚âà {total_refund:.2f} Ar (–∫—É—Ä—Å {rate:.2f} Ar/–≠—Å)"

                response = (
                    f"üë§ –ù–∏–∫: {user_data['nickname']}\n"
                    f"üí∞ –≠—Å—Å–µ–Ω—Ü–∏—è: {balance_es:.2f} –≠—Å{conversion_text}\n"
                    f"üí∞ –ê—Ä—ã: {balance_ar:.2f} Ar\n\n"
                    f"–î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≤–∞–ª—é—Ç–∞–º–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –±–∞–Ω–∫"
                )
            else:
                response = "‚ö† –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"

            bot.reply_to(message, response)

        except Exception as e:
            bot.reply_to(message, "‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞")
            print(f"Balance error: {e}")
        finally:
            if cursor:
                cursor.close()
            if connection:
                connection.close()