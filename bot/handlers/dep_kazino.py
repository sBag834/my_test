from time import sleep
from telebot import types
from bot.database import create_db_connection
from bot.utils.decorators import log_errors
import logging
from decimal import Decimal, InvalidOperation
import random


logger = logging.getLogger(__name__)

def setup_casino_handlers(bot):
    @bot.message_handler(commands=['dep'])
    @log_errors("transfer_command")
    def handle_transfer(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        /dep <—Å—É–º–º–∞> <–º–Ω–æ–∂–∏—Ç–µ–ª—å>
        """
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            args = message.text.split()[1:]

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if len(args) != 2:
                bot.reply_to(
                    message,
                    "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!*\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /dep <—Å—É–º–º–∞> <–º–Ω–æ–∂–∏—Ç–µ–ª—å>\n"
                    "–ü—Ä–∏–º–µ—Ä: /dep 10 5",
                    parse_mode="Markdown"
                )
                return

            amount_str, rate_str = args

            try:
                rate = Decimal(rate_str).quantize(Decimal('0.00'))
                if rate < Decimal('2') or rate > Decimal('10'):
                    raise ValueError
            except (ValueError, InvalidOperation):
                bot.reply_to(
                    message,
                    "‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å!*\n"
                    "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 2 –¥–æ 10",
                    parse_mode="Markdown"
                )
                return

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
            try:
                amount = Decimal(amount_str).quantize(Decimal('0.00'))
                if amount <= Decimal('0'):
                    raise ValueError
            except (ValueError, InvalidOperation):
                bot.reply_to(
                    message,
                    "‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!*\n"
                    "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n"
                    "- `100`\n"
                    "- `50.5`\n"
                    "- `75.00`",
                    parse_mode="Markdown"
                )
                return

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–∞
            process_transfer(
                bot=bot,
                sender_id=message.from_user.id,
                rate=rate,
                amount=amount
            )

        except Exception as e:
            logger.error(f"Transfer error: {str(e)}", exc_info=True)
            bot.reply_to(message, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞")



def process_transfer(bot, sender_id: int, rate: Decimal, amount: Decimal):
    connection = None
    cursor = None
    try:
        connection = create_db_connection()
        if not connection:
            bot.send_message(sender_id, "üîß –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return

        cursor = connection.cursor(dictionary=True)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        cursor.execute(
            "SELECT id, nickname, balance_ar FROM users WHERE telegram_id = %s",
            (sender_id,)
        )
        sender = cursor.fetchone()

        if not sender:
            bot.send_message(sender_id, "‚ùå –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balance_field = 'balance_ar'
        sender_balance = sender.get(balance_field, Decimal('0'))
        currency_name = '–ê—Ä–æ–≤'

        if sender_balance < amount:
            bot.send_message(
                sender_id,
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {currency_name}!\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {sender_balance:.2f}"
            )
            return

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        try:
            cursor.execute("START TRANSACTION")

            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            cursor.execute(
                f"UPDATE users SET {balance_field} = {balance_field} - %s WHERE id = %s",
                (float(amount), sender['id'])
            )


            # –∫–æ—Ä–æ—á–µ —Ç—É—Ç –±–µ—Ä—ë—Ç—Å—è —Ä–µ–π—Ç –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ç–∞–≤–æ—á–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞—Ö–æ–¥–∏—Ç —Ç–æ
            # —Ç–∏–ø—É –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Å—É–º–º–∞ –∏ –ø–∏—à—É—Ç —á—Ç–æ –∞–±–∞–ª–¥–µ—Ç—å, –∑–∞—à–ª–∞ —Å—Ç–∞–≤–∫–∞,
            # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –ø–∏—à—É—Ç –∞–Ω–ª–∞–∫–∏ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è


            bot.send_message(
                sender_id,
                f"–°—Ç–∞–≤–æ—á–∫–∞ –∏–¥—ë—Ç...\n\n"
            )

            sleep(0.75)
            bot.send_message(
                sender_id,
                f"–°—Ç–∞–≤–æ—á–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è...\n\n"
            )

            sleep(1)
            bot.send_message(
                sender_id,
                f"–°—Ç–∞–≤–æ—á–∫–∞ –ó–ê–õ–ï–¢–ê–ï–¢??????\n\n"
            )
            sleep(1)

            win_chance = 1 / rate * Decimal('0.9')
            if random.random() < win_chance:
                win_amount = amount * rate

                receiver_field = 'balance_ar'
                cursor.execute(
                    f"UPDATE users SET {receiver_field} = {receiver_field} + %s WHERE id = %s",
                    (float(win_amount), sender['id'])
                )


                new_balance = sender_balance - amount + win_amount
                bot.send_message(
                    sender_id,
                    f"üéâüéâüéâüéâ–°–¢–ê–í–û–ß–ö–ê –ó–ê–¢–ï–¢–ï–õ–ê–ê–ê–ê!üéâüéâüéâüéâ\n\n"
                    f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}"
                )
                connection.commit()

                return win_amount
            else:
                new_balance = sender_balance - amount
                bot.send_message(
                    sender_id,
                    f"üò≠üò≠üò≠—Å—Ç–∞–≤–æ—á–∫–∞ –Ω–µ –∑–∞–ª–µ—Ç–µ–ª–∞(((üò≠üò≠üò≠\n\n"
                    f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}"
                )
                connection.commit()
                return 0


        except Exception as e:
            connection.rollback()
            logger.error(f"Transaction failed: {str(e)}")
            bot.send_message(sender_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        finally:
            if connection.is_connected():
                cursor.close()

    except Exception as e:
        logger.error(f"Transfer process error: {str(e)}", exc_info=True)
    finally:
        if connection:
            connection.close()