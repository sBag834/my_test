from telebot import types
from bot.database import create_db_connection
from typing import Optional, List


def notify_admins(bot, user_id: int, nickname: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏"""
    connection = create_db_connection()
    if not connection:
        return

    try:
        with connection.cursor(dictionary=True) as cursor:
            cursor.execute("SELECT telegram_id FROM users WHERE is_admin = TRUE")
            admins = cursor.fetchall()

            for admin in admins:
                try:
                    markup = types.InlineKeyboardMarkup()
                    markup.row(
                        types.InlineKeyboardButton(
                            "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                            callback_data=f"approve_{user_id}"
                        ),
                        types.InlineKeyboardButton(
                            "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                            callback_data=f"reject_{user_id}"
                        )
                    )

                    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    clean_text = (
                        f"–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n"
                        f"ID: {user_id}\n"
                        f"–ù–∏–∫: {nickname}"
                    )

                    bot.send_message(
                        chat_id=admin['telegram_id'],
                        text=clean_text,
                        reply_markup=markup,
                        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin['telegram_id']}: {str(e)}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {str(e)}")
    finally:
        connection.close()


def notify_transfer(
    bot,
    recipient_id: int,
    sender_nick: str,
    amount: float,
    currency: str,
    keyboard: Optional[types.ReplyKeyboardMarkup] = None
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞.
    """
    try:
        message = (
            f"üí∏ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥!\n"
            f"‚Ä¢ –û—Ç: {sender_nick}\n"
            f"‚Ä¢ –°—É–º–º–∞: {amount:.2f} {currency}\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: /balance"
        )
        bot.send_message(
            chat_id=recipient_id,
            text=message,
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_id}: {str(e)}")


def broadcast_to_users(
    bot,
    user_ids: List[int],
    message: str,
    parse_mode: Optional[str] = None
) -> None:
    """
    –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    """
    for user_id in user_ids:
        try:
            bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=parse_mode
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")