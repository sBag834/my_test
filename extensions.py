import telebot
from telebot import types
import mysql.connector
from mysql.connector import Error
from decimal import Decimal, InvalidOperation, getcontext
import os
from dotenv import load_dotenv

load_dotenv()

#–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('BOT_TOKEN')
DB_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'database': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD')
}
getcontext().prec = 10

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)


#–ø–æ–¥–∫–ª—é—á–µ–Ω–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def create_db_connection():
    connection = None
    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        print("MySQL Database connection successful")
    except Error as err:
        print(f"Error: '{err}'")
    return connection

#—á—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def get_exchange_rate():
    try:
        with open('current_number.txt', 'r', encoding='utf-8') as f:
            rate_str = f.read().strip().replace(',', '.')
            return Decimal(rate_str)
    except FileNotFoundError:
        print("–§–∞–π–ª –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except (ValueError, InvalidOperation) as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫—É—Ä—Å–∞: {e}")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        return None

#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    connection = create_db_connection()
    if not connection:
        return False

    try:
        with connection.cursor(dictionary=True) as cursor:
            cursor.execute(
                "SELECT is_admin FROM users WHERE telegram_id = %s",
                (user_id,)
            )
            user = cursor.fetchone()
            return user and user['is_admin']
    except Error as e:
        print(f"Admin check error: {e}")
        return False
    finally:
        connection.close()

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    connection = create_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)

        cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (message.from_user.id,))
        user = cursor.fetchone()

        if user:
            if user['is_verified']:
                bot.reply_to(message, f"–ó–¥–∞—Ä–æ–≤–∞, {user['nickname']}!\n"
                             "—á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤—å /help\n"
                             "\n"
                             "–º—è—É")
            else:
                bot.reply_to(message, "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        else:
            msg = bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π –Ω–∏–∫ –∏–∑ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–∞:")
            bot.register_next_step_handler(msg, process_nickname_step)

        cursor.close()
        connection.close()


@bot.message_handler(commands=['help'])
def help_1(message):
    bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥: /nick\n"
                          "–ö–æ–º–∞–Ω–¥–∞ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å: /balance\n"
                          "–ø–µ—Ä–µ–≤–æ–¥ /transfer\n"
                          "–∏—Å—Ç–æ—Ä–∏—è /history")


@bot.message_handler(commands=['nick'])
def show_all_nicknames(message):
    connection = create_db_connection()
    if connection:
        try:
            cursor = connection.cursor(dictionary=True)

            #–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã –∏–∑ –±–∞–∑—ã
            cursor.execute("SELECT nickname FROM users WHERE is_verified = TRUE ORDER BY nickname")
            users = cursor.fetchall()

            if users:
                #—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
                nicknames = [user['nickname'] for user in users]
                response = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n".join(f"üë§ {nickname}" for nickname in nicknames)
            else:
                response = "üòï –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

            bot.reply_to(message, response)

        except Error as e:
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            print(f"Database error: {e}")
        finally:
            cursor.close()
            connection.close()
    else:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


@bot.message_handler(commands=['balance'])
def show_user_balance(message):
    try:
        connection = create_db_connection()
        if connection:
            cursor = connection.cursor(dictionary=True)

            cursor.execute("""
                SELECT nickname, balance, balance_ar 
                FROM users 
                WHERE telegram_id = %s
            """, (message.from_user.id,))

            user_data = cursor.fetchone()

            if user_data:
                balance_es = user_data['balance'] if user_data['balance'] is not None else Decimal('0')
                balance_ar = user_data['balance_ar'] if user_data['balance_ar'] is not None else Decimal('0')

                rate = get_exchange_rate()
                conversion_text = ""
                if rate is not None and rate > 0:
                    converted_ar = balance_es * rate
                    conversion_text = f"\n  ‚âà {converted_ar:.2f} Ar (–ø–æ –∫—É—Ä—Å—É {rate:.2f} Ar/–≠—Å)"

                response = (
                    f"üë§ –ù–∏–∫: {user_data['nickname']}\n"
                    f"üí∞ –≠—Å—Å–µ–Ω—Ü–∏—è: {balance_es:.2f} –≠—Å{conversion_text}\n"
                    f"üí∞ –ê—Ä—ã: {balance_ar:.2f} Ar\n\n"
                    f"–î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≤–∞–ª—é—Ç–∞–º–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –±–∞–Ω–∫"
                )
            else:
                response = "‚ö† –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"

            bot.reply_to(message, response)

    except Exception as e:
        bot.reply_to(message, "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞")
        print(f"Error in /balance: {e}")
    finally:
        if connection:
            cursor.close()
            connection.close()


@bot.message_handler(commands=['transfer'])
def start_transfer(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–≠—Å (ES)', '–ê—Ä (AR)')
    msg = bot.reply_to(message, "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_currency_choice)


def process_currency_choice(message):
    currency = message.text.lower()
    if currency not in ['—ç—Å (es)', '–∞—Ä (ar)']:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã")
        return

    currency_type = 'es' if '—ç—Å' in currency else 'ar'
    user_data = {'currency': currency_type}

    msg = bot.reply_to(message,
                       f"üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–Ω–∏–∫–Ω–µ–π–º> <—Å—É–º–º–∞>\n–ü—Ä–∏–º–µ—Ä: user 50.50",
                       reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_transfer_step, currency_type)


@bot.message_handler(commands=['history'])
def show_history(message):
    try:
        try:
            page = int(message.text.split()[1]) if len(message.text.split()) > 1 else 1
            page = max(1, page)
        except ValueError:
            page = 1

        connection = create_db_connection()
        if not connection:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ")
            return

        with connection.cursor(dictionary=True) as cursor:
            cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (message.from_user.id,))
            user = cursor.fetchone()

            if not user:
                bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                return

            cursor.execute("""
                SELECT COUNT(*) as total 
                FROM transactions 
                WHERE sender_id = %s OR receiver_id = %s
            """, (user['id'], user['id']))
            total = cursor.fetchone()['total']
            pages = max(1, (total + 9) // 10)

            cursor.execute("""
                SELECT 
                    t.amount,
                    t.timestamp,
                    sender.nickname as sender_nick,
                    receiver.nickname as receiver_nick,
                    t.sender_id,
                    t.receiver_id,
                    t.currency
                FROM transactions t
                JOIN users sender ON t.sender_id = sender.id
                JOIN users receiver ON t.receiver_id = receiver.id
                WHERE t.sender_id = %s OR t.receiver_id = %s
                ORDER BY t.timestamp DESC
                LIMIT 10 OFFSET %s
            """, (user['id'], user['id'], (page - 1) * 10))

            transactions = cursor.fetchall()

            if transactions:
                history = []
                for t in transactions:
                    amount = Decimal(t['amount']).quantize(Decimal('0.00'))
                    timestamp = t['timestamp'].strftime('%d.%m %H:%M')
                    currency = t['currency'].upper()

                    if t['sender_id'] == user['id']:
                        entry = (
                            f"üî¥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount} {currency}\n"
                            f"‚Üí –î–ª—è: {t['receiver_nick']}\n"
                            f"‚è∞ {timestamp}"
                        )
                    else:
                        entry = (
                            f"üü¢ –ü–æ–ª—É—á–µ–Ω–æ: {amount} {currency}\n"
                            f"‚Üê –û—Ç: {t['sender_nick']}\n"
                            f"‚è∞ {timestamp}"
                        )
                    history.append(entry)

                response = (
                        f"üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (—Å—Ç—Ä. {page}/{pages}):\n\n" +
                        "\n\n".join(history) +
                        f"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history <–Ω–æ–º–µ—Ä> –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
                )
            else:
                response = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π"

            bot.send_message(message.chat.id, response)

    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")
        print(f"History error: {e}")
    finally:
        if connection:
            connection.close()


def process_transfer_step(message, currency_type):
    connection = None
    cursor = None
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <–Ω–∏–∫–Ω–µ–π–º> <—Å—É–º–º–∞>")
            return

        receiver_nickname, amount_str = parts
        try:
            amount = Decimal(amount_str).quantize(Decimal('0.00'))
            if amount <= Decimal('0'):
                bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
        except Exception:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.50)")
            return

        connection = create_db_connection()
        if not connection:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ")
            return

        cursor = connection.cursor(dictionary=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        cursor.execute(
            "SELECT id, nickname, balance, balance_ar FROM users WHERE telegram_id = %s",
            (message.from_user.id,)
        )
        sender = cursor.fetchone()

        if not sender:
            bot.reply_to(message, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
        balance_field = 'balance' if currency_type == 'es' else 'balance_ar'
        sender_balance = Decimal(str(sender[balance_field]))

        if sender_balance < amount:
            currency_name = '–≠—Å' if currency_type == 'es' else '–ê—Ä'
            bot.reply_to(message,
                         f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {currency_name}. –í–∞—à –±–∞–ª–∞–Ω—Å: {sender_balance:.2f} {currency_name.upper()}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT id, nickname, telegram_id 
            FROM users 
            WHERE nickname = %s AND id != %s
        """, (receiver_nickname, sender['id']))
        receiver = cursor.fetchone()

        if not receiver:
            bot.reply_to(message, "‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —ç—Ç–æ –≤—ã —Å–∞–º–∏")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            connection.rollback()

            # –Ø–≤–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            cursor.execute("START TRANSACTION")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            cursor.execute(f"""
                    UPDATE users 
                    SET {balance_field} = {balance_field} - %s 
                    WHERE id = %s
                """, (float(amount), sender['id']))

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            receiver_field = 'balance' if currency_type == 'es' else 'balance_ar'
            cursor.execute(f"""
                    UPDATE users 
                    SET {receiver_field} = {receiver_field} + %s 
                    WHERE id = %s
                """, (float(amount), receiver['id']))

            # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            cursor.execute("""
                    INSERT INTO transactions 
                    (sender_id, receiver_id, amount, currency)
                    VALUES (%s, %s, %s, %s)
                """, (sender['id'], receiver['id'], float(amount), currency_type))

            connection.commit()

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            currency_symbol = '–≠—Å' if currency_type == 'es' else 'Ar'
            new_balance = sender_balance - amount
            response = (
                f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ {amount:.2f} {currency_symbol} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {receiver['nickname']}\n"
                f"‚Ä¢ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} {currency_symbol}"
            )

            bot.reply_to(message, response)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if receiver.get('telegram_id'):
                try:
                    bot.send_message(
                        chat_id=receiver['telegram_id'],
                        text=(
                            f"üí∏ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥!\n"
                            f"‚Ä¢ –û—Ç: {sender['nickname']}\n"
                            f"‚Ä¢ –°—É–º–º–∞: {amount:.2f} {currency_symbol}\n"
                            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
                        )
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        except Exception as e:
            connection.rollback()
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤")
            print(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

    except Exception as e:
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()


def process_nickname_step(message):
    try:
        nickname = message.text

        #–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ –Ω–∏–∫
        if len(nickname) < 3 or len(nickname) > 25:
            bot.reply_to(message, "–î–ª–∏–Ω–∞ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç 3 –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        connection = create_db_connection()
        if connection:
            cursor = connection.cursor()

            # –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–Ω—è—Ç –ª–∏ —É–∂–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º
            cursor.execute("SELECT * FROM users WHERE nickname = %s", (nickname,))
            if cursor.fetchone():
                bot.reply_to(message, "–≠—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
                return

            cursor.execute(
                "INSERT INTO users (telegram_id, nickname) VALUES (%s, %s)",
                (message.from_user.id, nickname)
            )
            connection.commit()

            notify_admin(message.from_user.id, nickname)

            bot.reply_to(message, "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

            cursor.close()
            connection.close()
    except Exception as e:
        bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
        print(f"Error: {e}")


def notify_admin(user_id, nickname):
    connection = create_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)

        cursor.execute("SELECT telegram_id FROM users WHERE is_admin = TRUE")
        admins = cursor.fetchall()

        for admin in admins:
            markup = types.InlineKeyboardMarkup()
            approve_btn = types.InlineKeyboardButton(
                "Approve",
                callback_data=f"approve_{user_id}"
            )
            reject_btn = types.InlineKeyboardButton(
                "Reject",
                callback_data=f"reject_{user_id}"
            )
            markup.add(approve_btn, reject_btn)

            bot.send_message(
                admin['telegram_id'],
                f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\nUser ID: {user_id}\nNickname: {nickname}\n\n–û–¥–æ–±—Ä–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
                reply_markup=markup
            )

        cursor.close()
        connection.close()


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data.startswith("approve_") or call.data.startswith("reject_"):
        user_id = int(call.data.split("_")[1])

        connection = create_db_connection()
        if connection:
            cursor = connection.cursor()

            if call.data.startswith("approve_"):
                cursor.execute(
                    "UPDATE users SET is_verified = TRUE WHERE telegram_id = %s",
                    (user_id,)
                )
                connection.commit()

                bot.send_message(
                    user_id,
                    "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
                )

                bot.answer_callback_query(
                    call.id,
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω!",
                    show_alert=False
                )
                bot.edit_message_text(
                    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞.",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
            else:
                cursor.execute(
                    "DELETE FROM users WHERE telegram_id = %s",
                    (user_id,)
                )
                connection.commit()

                bot.send_message(
                    user_id,
                    "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )

                bot.answer_callback_query(
                    call.id,
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω!",
                    show_alert=False
                )
                bot.edit_message_text(
                    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )

            cursor.close()
            connection.close()



#–¥–ª—è –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['bl'])
def handle_admin_balance(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(message.from_user.id):
            bot.reply_to(message, "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:]
        if not args:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞: /bl <–Ω–∏–∫>")
            return

        nickname = ' '.join(args).strip()
        connection = create_db_connection()
        if not connection:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        with connection.cursor(dictionary=True) as cursor:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É
            cursor.execute("""
                SELECT balance, balance_ar, nickname 
                FROM users 
                WHERE nickname = %s
            """, (nickname,))
            user_data = cursor.fetchone()

            if not user_data:
                bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            rate = get_exchange_rate()
            conversion_text = ""
            if rate and rate > 0:
                converted_ar = user_data['balance'] * rate
                conversion_text = f"\n  ‚âà {converted_ar:.2f} Ar (–∫—É—Ä—Å {rate:.2f} Ar/–≠—Å)"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = (
                f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å:\n"
                f"–ù–∏–∫: {user_data['nickname']}\n"
                f"üí∞ –≠—Å—Å–µ–Ω—Ü–∏—è: {user_data['balance']:.2f} –≠—Å{conversion_text}\n"
                f"üí∞ –ê—Ä—ã: {user_data['balance_ar']:.2f} Ar"
            )
            bot.reply_to(message, response)

    except Exception as e:
        bot.reply_to(message, "‚õî –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        print(f"Admin balance error: {e}")
    finally:
        if connection:
            connection.close()



print("Bot is running...")
bot.infinity_polling()